#!/bin/python3

import math
import os
import random
import re
import sys

def unboundedKnapsack(k, arr):
 
    dp = [0] * (k + 1)

    for i in range(1, k + 1):
        for num in arr:
            if num <= i:
                dp[i] = max(dp[i], dp[i - num] + num)

    return dp[k]

def processTestCases(testCases):
    results = []
    for case in testCases:
        n, k, arr = case
        results.append(unboundedKnapsack(k, arr))
    return results

if __name__ == "__main__":
    testCases = []
    t = int(input().strip())
    for _ in range(t):
        n, k = map(int, input().strip().split())
        arr = list(map(int, input().strip().split()))
        testCases.append((n, k, arr))
    
    results = processTestCases(testCases)
    for result in results:
        print(result)
